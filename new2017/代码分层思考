代码分层思考

根据类功能来分包分层

根据业务功能来分包分层


服务层返回正常数据如对象，对象集合，对象数组等

如果服务层出现错误则抛出异常即可，控制器层捕获异常进行返回格式的统一处理

那如果是在服务层进行事务操作呢？有一些不可知的异常，需要回滚事务，这样才不会造成错误


Java的各种开发框架发展了很多年，影响了一代又一代的程序员，现在无论是程序员，还是架构师，使用这些开发框架都面临着两方面的挑战。

一方面是要快速开发出系统，这就要求使用的开发框架尽量简单，无论是新手还是老手都能快速上手，快速掌握页面渲染、数据库访问等常用技术。也要求开发框架能尽量多地集成第三方工具，以便信手拈来。最后，还希望在开发调试过程中，方便代码更改后能快速重启。

另外一方面，当系统模块增加，用户使用量增加时，面对这样的挑战，系统拆分成为新的架构，程序员和架构师当然不希望换掉已有的开发框架，希望能由小而美的系统过渡到大而强的分布式系统。

环顾当前Java开源世界中的流行技术框架，能同时胜任这项工作的微乎其微，Play和ActFramework 都是不错的选择，国内的Nutz和JFinal的口碑也不错。但能同时满足快速开发和分布式系统架构的框架，还是群众基础最好、功能最全、基于Spring技术的Spring Boot框架。

跳入某个圈子无法自拔了。一直在思考如何提高效率，但却没办法提高起来。

====设计要点====
面对客户的界面，要以界面来设计功能要点
如app端和web端

app：首页==轮播图，底部导航，顶部搜索，
     圈子==瀑布流加载，详情，评论，删除，点赞等
     发现==常用搜索，图片栏目
     我的==登录，注册，设置，检查更新

     图片详情页==图片列表，评论（有回复要加载回复）列表
     图片浏览页==下载，分享，设为壁纸等

web：首页==轮播，列表，栏目，菜单等
	 列表页==
	 详情页==
	 等等页面
==每个页面所需要的数据是什么？？这个确定好就好就可以进行url，数据库表，功能设计了。===

常用的功能有
用户模块 订单模块 产品模块 新闻模块 等
用户模块==用户登录业务，用户注册业务，用户关注业务，用户学习业务等业务
==========
根据页面来设计url或业务逻辑。如用户登录操作。显示登录界面->用户输入账号密码->提交服务器->服务器验证成功重定向到登录页 
原型图设计 -- UI设计 -- 确定前端需要的数据 -- 确定功能 -- 设计数据表 -- 前端界面编写 --  前端动画编写 -- 后端编写业务逻辑（url设计，应用分层设计） -- 编写管理系统
原型图 = 首页，登录页，注册页，列表页，详情页，图片浏览页，文章页，评论页
UI设计 = 给各个页面上色，搭配颜色和加入图标
确定前端需要的数据 = 比如首页需要轮播图列表，图片流列表等，用户信息页需要用户信息
确定功能 = 比如首页需要搜索功能、提示通知功能，用户信息页需要修改密码、修改头像功能等等，基于页面和基于后台静默加载来确定功能
设计数据表 = 根据前端需要的数据来确定数据表
。。。
===========
赶紧看几本大师级的书
领域驱动设计，企业应用架构模式
《Pojos in action》、《J2EE 核心模式》
=====按照阿里巴巴java手册来====
web层  


有这个几个疑问
1.对于简单的项目，到底如果使得工程结构最优。如何分层，如怎么分表现层，业务逻辑层等。各层之间数据交换格式到底是怎样的
2.按照分层的思想来架构项目的话，具体的代码包结构要怎样？如请求处理层里面是放一个controller包吗？
3.是按照应用分层来分包还是按照业务功能来分包呢？
3.控制器和服务的职责到底如何区分？

4、对于数据表有关联的，实体类要如何定义？客户端那边需要有两个表相结合的数据，要如何整合这些实体对象？
解答：假设实体是和数据表一一对应

其实各种人的工程结构不一定是一样的，包括阿里巴巴的还有慕课网实战课程的那些课程，基本都不一样。好像没有一个统一的完美的标准。
我一直在寻找，然而却陷入其中。走不出来了。
MVC和分层架构到底有何关系？？？长期以来被混淆了。呜呜~~~~~
解答：网上的
三层架构，每层都有自己的模式，模式就是套路（杨氏太极拳十八式，就是套路），每一层都有自己的套路，就是所谓架构模式。表示层最常用的套路、模式就是MVC ，MVC就是表示层的一种架构模式。业务层的架构模式有事务脚本模式、领域模型模式、CQRS 等等（另一种说法是贫血、失血、充血、胀血...）。持久层的架构模式有入口模式、数据映射器模式等等。一般来说，框架 > 架构模式> 设计模式 > 设计原则。打个比方，Hibernate是一个持久层框架，是数据映射器模式的具体实现，实现时用到了工厂模式等很多设计模式，体现了什么依赖倒转原则、开闭原则、里氏替换原则等等设计原则。AngularJS是一个客户端 MVC 框架，是 MVC架构模式的一种实现，实现时用到。。。。设计模式，体现了。。。等设计原则。Struts/http://ASP.NET MVC是表示层框架。。。。。诸如此类。

指的是数据、业务、客户端，我觉得跟MVC也是一样的啊，谁知道你老师怎么想。当然UI自己还可以切开成MVC，业务也可以切开成MVC，数据库还能切开成MVC，其实MVC只是一个在哲学上具有指导意义的东西，不能把它看成一个架构

MVC应该指的是一种模式，整个项目可以是MVC的模式，并且对于View层来说，前端也可以应用MVC模式开发。
mvc是没有DB的概念,可以理解为前端展现的一个轻量级框架。相比三层mvc要轻很多,就是一个思路,三层包含了整个开发.

MVC和三层架构不是并列的关系，MVC只是对三层架构中表现层的进一步划分，同时表现层也有可能采用其他设计模式

三层架构的目的着重点是“高内聚，低耦合”，即解耦。

　　MVC的目的则是实现Web系统的职能分工，即职责划分。

　控制器C控制器接受用户的输入并调用模型和视图去完成用户的需求。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。

我的理解：
基于后端来说，mvc即模型，视图，控制器，这三者组成一种数据流转过程，首先请求数据走到控制器，然后控制器调用模型，模型处理逻辑后返回数据给控制器，控制器转发到相应的视图里。
基于app客户端，以android来说，mvc对应的模型=业务逻辑处理，控制器=activity，fragment，视图=xml定义的view。
也就是说mvc其实是一种代码编写方式，对mvc建立对应的对象，如picModel，PicController对象，通过这些对象来对请求进行处理后响应给视图。假如是api
接口的话，代码编写时就用到控制器而已了。那这个api接口代码的编写方式就不是基于mvc了。一定要注意这点。编写api接口时不是mvc，所以不要有这种思维惯性。
理解有误~~~详情请看网上的文章http://www.cnblogs.com/zdxster/p/5305155.html



假设我现在来定义一种自己的工程结构~~~~
项目分为api接口，门户，后台管理三个大模块。
分包这样分：

开放接口层
api-controller 访问控制进行转发 通过web封装成http接口？调用service？调用web层？
api-rpc  通过service封装成rpc接口

web层（访问控制层）
web-home-pc-controller 访问控制进行转发
web-home-mobil-controller 
web-admin-controller 

业务逻辑层 
service -- 提供可复用的逻辑。传入参数，返回参数。和上层交互的数据格式到底要是怎样的呢？？？很疑问这边

数据持久层
dao -- 用于提供数据表的增删改查
如何将这些理念应用到实际的例子中呢？？？？？


对于数据格式的获取，举个栗子来说明
假如前端需要的数据是pic['id','名称,'缩略图路径','创建时间']列表，那这个可以直接对应数据库的表。
此时需定义一个与数据表pic字段一一对应的实体对象picEntity.class即DO，然后查询即可
对于不需要数据表关联的可以用以上方式，但绝大部分是需要关联的

关联查找，关联新增与单独查找，子查找之间的对比效率

假如前端需要的数据是pic['id','名称','次图集评论数量','此图集详细的图数量','此图集是由谁创建的']列表，此时不能够直接查询，
那这个时候是关联查询好，还是先查询pic表再查询图集详情表然后再查询用户表呢？实体类又是如何定义的？
解答：采用关联查询效率会更高，实体类定义为领域模型即picDTO,然后通过关联查询即DAO层查询后赋值给picDTO，service层将picDTO转发给控制器层。
那也就是说可以不用配置DO对象（实体类），因为DTO可以包含DO，前提是去掉关联字段。
我们通过mybitea来实现以上功能。 


前端需要的数据是特定的，我们后端拿到数据表的数据后要懂得隐藏一些没必要给前端的数据。

==项目开发流程==
1.确定api接口
url,方法,参数,响应格式
2.设计数据库

3.工程结构分层
设计领域对象
设计数据持久层
设计服务层
设计控制器层

設計返回統一異常 状态码和消息

每一层的输入输出，如何定义方法属性。数据在每一层的表现形式

客户端client  http协议 json格式

web控制层  封装为DTO业务领域模型

业务逻辑层  封装为对象操作 RPC协议  对象格式

1.后端分层架构 多层架构 mvc架构

2.移动端分层架构 多层架构 mvc mvp mvvp 架构 

3.前端分层架构 mvvp 架构

现在后端分层基本做好了
后端分层的要点
==--==
1.设计数据库
2.确定前端需要的数据
3.设计VO
4.确定DTO
5.设计DO























